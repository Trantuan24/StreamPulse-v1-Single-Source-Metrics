# StreamPulse v1 - Production-like Docker Compose
# Real-time Data Pipeline: CSV → Kafka → Flink → Redis → FastAPI → Grafana

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: streampulse-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: streampulse-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      KAFKA_OPTS: -javaagent:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.18.0.jar=9101:/etc/kafka/prometheus/jmx_exporter_config.yml
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ../../monitoring/jmx_exporter_config.yml:/etc/kafka/prometheus/jmx_exporter_config.yml
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "unset KAFKA_OPTS && kafka-topics --bootstrap-server kafka:29092 --list",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for serving layer
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: streampulse-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flink JobManager with built-in job
  flink-jobmanager:
    build:
      context: ../../streaming/flink-jobs/trip-metrics-job
      dockerfile: Dockerfile

    hostname: flink-jobmanager
    container_name: streampulse-flink-jobmanager
    ports:
      - "8081:8081"
      - "9249:9249" # Metrics port
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
        jobmanager.memory.process.size: 1600m
        taskmanager.memory.process.size: 1728m
        metrics.reporter.prom.factory.class: org.apache.flink.metrics.prometheus.PrometheusReporterFactory
        metrics.reporter.prom.port: 9249
        # -- High-availability and fault tolerance --
        state.backend: rocksdb
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        execution.checkpointing.interval: 1min
        restart-strategy: fixed-delay
        restart-strategy.fixed-delay.attempts: 5
        restart-strategy.fixed-delay.delay: 10s
    volumes:
      - flink-checkpoints:/tmp/flink-checkpoints
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Flink TaskManager with built-in job
  flink-taskmanager:
    build:
      context: ../../streaming/flink-jobs/trip-metrics-job
      dockerfile: Dockerfile

    hostname: flink-taskmanager
    container_name: streampulse-flink-taskmanager
    depends_on:
      flink-jobmanager:
        condition: service_healthy
    command: taskmanager
    scale: 1
    ports:
      - "9250:9249" # Metrics port (different from JobManager)
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
        jobmanager.memory.process.size: 1600m
        taskmanager.memory.process.size: 1728m
        metrics.reporter.prom.factory.class: org.apache.flink.metrics.prometheus.PrometheusReporterFactory
        metrics.reporter.prom.port: 9249
        # -- High-availability and fault tolerance --
        state.backend: rocksdb
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        execution.checkpointing.interval: 1min
        restart-strategy: fixed-delay
        restart-strategy.fixed-delay.attempts: 5
        restart-strategy.fixed-delay.delay: 10s
    volumes:
      - flink-checkpoints:/tmp/flink-checkpoints
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9249"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    restart: unless-stopped

  # FastAPI serving layer
  api:
    build:
      context: ../../serving/api
      dockerfile: Dockerfile
    hostname: api
    container_name: streampulse-api
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    restart: unless-stopped
    # Note: Health check is defined in Dockerfile, no need to duplicate here

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    hostname: prometheus
    container_name: streampulse-prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ../../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    hostname: grafana
    container_name: streampulse-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ../../monitoring/grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
      - ../../monitoring/grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ../../monitoring/grafana-dashboards:/etc/grafana/dashboards
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    hostname: redis-exporter
    container_name: streampulse-redis-exporter
    depends_on:
      - redis
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    restart: unless-stopped

  # Alertmanager for notifications
  alertmanager:
    image: prom/alertmanager:v0.25.0
    hostname: alertmanager
    container_name: streampulse-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ../../monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    restart: unless-stopped
    command: --config.file=/etc/alertmanager/alertmanager.yml --storage.path=/alertmanager

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  flink-checkpoints:
  prometheus-data:
  grafana-data:
  alertmanager-data:

networks:
  default:
    name: streampulse-network
